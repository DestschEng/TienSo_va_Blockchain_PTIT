Blocks & transactions
Blockchains are made of blocks. 
And blocks are made of transactions. 
Without going into the details, you can think of blocks as being objects divided into two parts: a header and a body. 
The header contains information about the blocks, such as who produced them and when they were made. 
The body is nothing more than an ordered sequence of transactions.

Note that the "chain" of blockchain comes from how blocks reference one another. 
Indeed, each block header includes at least two things:

A hash digest of the block body
A hash digest of the previous block heade

┏━ Header ━━━━━━━━━━━━━━┳━ Body ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                       ┃                                           ┃
┃  Body hash            ┃ ┌────────────────┬────────────────┬─────┐ ┃
┃  Previous header hash ┃ │ Transaction #1 │ Transaction #2 │ ... │ ┃
┃  Timestamp            ┃ └────────────────┴────────────────┴─────┘ ┃
┃                       ┃                                           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
A hash digest is a tamper-proof mechanism that maps an input value to a fixed-sized output. 
Think of it as a way to assign an identifier to a piece of content, such that the identifier depends on the content itself: change the content, change the identifier.

A chain is formed by including in every block header:

a hash of the block body; and
a header hash of the previous block.
Changing any transaction in a block will change the block body hash, thus changing the block header hash, the header hash of the next block, and so on, invalidating the entire chain that follows.

        ____          ____          ____          ____          ____
       /    /\       /    /\       /    /\       /    /\       /    /\
o ❮❮  /____/  \ ❮❮  /____/  \ ❮❮  /____/  \ ❮❮  /____/  \ ❮❮  /____/  \ ...
      \    \  /     \    \  /     \    \  /     \    \  /     \    \  /
╿      \____\/       \____\/       \____\/       \____\/       \____\/
│
│                                     ╿
│                                     │
└ Genesis configuration               │
                                      └ Block
A transaction is, therefore, the most fundamental primitive on blockchains. 
They are the mechanism whereby users (a.k.a you) can take actions to change the state of the blockchain. A chain starts from an initial state typically referred to as genesis configuration. And from there, transactions map a previous state into a new state. Finally, blocks are merely there to batch transactions together.

TL;DR
                        ┌ For spending
                        │
                        ╽
┏━ Header ━━━━━━━━━━━━━┳━ Payment credentials ━━━━━━━┳━ Delegation credentials ━━━━┓
┃                      ┃                             ┃                             ┃
┃                      ┃  ┌───────────────────────┐  ┃  ┌───────────────────────┐  ┃
┃  ┌──────┬─────────┐  ┃  │ Verification key hash │  ┃  │ Verification key hash │  ┃
┃  │ Type │ Network │  ┃  ├────────── OR ─────────┤  ┃  ├────────── OR ─────────┤  ┃
┃  └──────┴─────────┘  ┃  │      Script hash      │  ┃  │      Script hash      │  ┃
┃                      ┃  └───────────────────────┘  ┃  └───────────────────────┘  ┃
┃                      ┃                             ┃                             ┃
┗━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
                                                      ╿
                                                      │
                                                      └ For:
                                                          - publishing certificates
                                                          - withdrawing rewards
Before we move on, let's recap again:

An address is made of 2 or 3 parts: a header, payment credentials and delegation credentials;
The header describes the type of address and the network it is for;
The last part, the delegation credentials, is optional though highly recommended;
Credentials (payment or delegation) take one of two forms:
a verification key hash;
a script hash;
Payment credentials control how to spend from an address;
Delegation credentials control how to publish certificates and how to withdraw rewards;
A script allows the definition of arbitrary validation logic.
Scripts, Datums and Redeemers
Overview
Hang in there! We are almost at the end of this crash course. We've seen what a UTxO is what an address is made of. And we spoke a bit about scripts. In particular, we said that scripts are like predicates, that is, pure functions (in the Mathematical sense) that takes a transaction as an argument and return either True or False.

Well, not exactly. We lied to you (only a tiny bit).

If we only had that, it would be hard to express more elaborate logic. 
In particular, capturing a state, which programs often require, would be infeasible. 
A state and transitions from that state. This is where the extended UTxO model strikes in. 
It adds two new components to what we've already seen: datums and redeemers.

We mentioned the datum earlier without calling it a datum when we said that outputs contained a value, an address and a data payload. 
This is what the datum is, a free payload that developers can use to attach data to script execution. 
When a script is executed in a spending scenario, it receives not only the transaction as context but also the datum associated with the output being spent.

The redeemer, on the other hand, is another piece of data that is also provided with the transaction for any script execution. 
Notice that the datum and redeemer intervene at two distinct moments. 
A datum is set when the output is created (i.e. when the post-it note is hung on the wall, it is part of the note). 
Whereas the redeemer is provided only when spending the output (i.e. with the form handed over to the employee).

Analogy
Another way to look at scripts, datums and redeemers is to think of them as a parameterised mathematical function.
             Script
          ╭─────────╮
    f(x) = x * a + b  = true | false
           ╿   ╿   ╿
  Redeemer ┘   │   │
               └─┬─┘
               Datum
The script defines the function as a whole. 
It indicates how the parameters and arguments are combined to produce a boolean outcome. 
The datum corresponds to the parameters of the function. 
It allows configuring the function and re-using a similar validation logic with different settings. 
Both the function and the parameters are defined when assets are locked in an output. 
Which leaves only the function argument to be later provided. 
That argument is the redeemer (as well as the rest of the transaction).

This is why scripts are often referred to as validators. 
Unlike some other blockchain systems, they are also, therefore, fully deterministic. 
Their execution only depends on the transaction they're involved with, and evaluating the transaction's outcome is possible before sending it to the network. 
Datums act as local states, and redeemers are user inputs provided in the transaction itself.

TL;DR
And we've reached the end of this crash course. 
Let's do a final recap regarding scripts, datums and redeemers.

- Scripts are akin to parameterized predicate functions, returning either true or false.
- Datums take the role of function parameters, whereas redeemers the one of argument.
- Scripts are also called validators and are completely deterministic.
- Scripts are used to validate specific operations in a transaction.
- What a script is used for is referred to as its purpose. There are 4 purposes:
    + spend -- controls how to spend outputs;
    + publish -- controls how to publish delegation certificates;
    + withdraw -- controls how to withdraw consensus rewards;
    + mint -- controls how to mint or burn assets.
- Only spending scripts (i.e. purpose=spend) have access to a datum.

POSIXTimeRange
A POSIXTimeRange can be visualized like a subsection of a numberline starting from negative infinity(-∞) to positive infinity (+∞)

         ⬤-------------→⬤
-∞       -3 -2  -1   0   1   2   3       +∞
 └┴┴┴┴┴─┴─┴──┴───┴───┴───┴───┴───┴─┴─┴┴┴┴┘ 
make_range(lower_bound: int, upper_bound: int) -> POSIXTimeRange

      lower_bound        upper_bound
          ⬤----------------→⬤
-∞       -3 -2  -1   0   1   2   3       +∞
 └┴┴┴┴┴─┴─┴──┴───┴───┴───┴───┴───┴─┴─┴┴┴┴┘ 
